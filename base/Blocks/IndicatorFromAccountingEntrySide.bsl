Функция block_indicator_from_accounting_entry_side_calc_value(block_type, node, path, context, block_context)
	indicator_list_src = block_context.indicator_list_src;
	indicator_list_dest = block_context.indicator_list_dest;
	accounting_entry_side_result = Новый Структура();
	
	// Работа с черным списком - заменяем счет на константный для черного списка
	Если block_context.blacklist_accounts["Список"].Найти(block_context.accounting_entry_side.КодСчета) <> Неопределено Тогда
		accounting_entry_side_result.Вставить("СчетСБИС", block_context.blacklist_accounts["СчетСопоставления"]);
		Возврат accounting_entry_side_result;
	КонецЕсли; // Работа с черным списком - заменяем счет на константный для черного списка
	
	//выбираем подходящие показатели по коду счета
	ПодходящиеПоказателиИсточник = get_prop(block_context, "ПодходящиеПоказателиИсточник");
	Если ПодходящиеПоказателиИсточник = Неопределено Тогда
		ПодходящиеПоказателиИсточник = get_prop(indicator_list_src, block_context.accounting_entry_side.КодСчета);
		Если ПодходящиеПоказателиИсточник = Неопределено Или ПодходящиеПоказателиИсточник.Количество() = 0 Тогда
			// Работа с забалансовым счетом
			Если block_context.accounting_entry_side.КодСчета = Null Тогда 
				accounting_entry_side_result.Вставить("СчетСБИС", "");
				Возврат accounting_entry_side_result;
			КонецЕсли; // Работа с забалансовым счетом
			add_indicator_error(block_context.accounting_entry_side.КодСчета);
			Возврат accounting_entry_side_result;		
		КонецЕсли;
		block_context.Вставить("ПодходящиеПоказателиИсточник", ПодходящиеПоказателиИсточник);
		ТаблицаПодходящихИсточник = Новый Массив();
		block_context.Вставить("ТаблицаПодходящихИсточник", ТаблицаПодходящихИсточник); 
		block_context.Вставить("ИндексПодходящегоПоказателя", 0);
		block_context.Вставить("ИндексПараметраПодходящегоПоказателя", 0);
		block_context.Вставить("ИндексДетализацииПодходящегоПоказателя", 0);
		block_context.Вставить("_КонтекстРасчетаПринадлежности", Неопределено);
		block_context.Вставить("_КонтекстРасчетаЭкспортаДетализации", Неопределено);
		block_context.Вставить("_КонтекстРасчетаИмпортаДетализации", Неопределено);
	КонецЕсли;
	
	// рассчитываем идентифицирующие параметры
	
	Для i = block_context.ИндексПодходящегоПоказателя По ПодходящиеПоказателиИсточник.Количество()-1 Цикл
		СтрНеПодходит = Ложь; 
		Стр = ПодходящиеПоказателиИсточник[i];
		сч = 0;
		Для Каждого ИдентифПарам Из Стр["Параметры"] Цикл
			Если ИдентифПарам.Ключ = "Счет" Тогда
				Продолжить;
			КонецЕсли;
			Если сч < block_context.ИндексПараметраПодходящегоПоказателя Тогда
				сч = сч + 1;
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(ИдентифПарам.Значение) Тогда
				handler = workspace_init_procedure_block(ИдентифПарам.Значение[0]);
				args_values = procedures_callreturn_get_params(handler.node);
				Если block_context._КонтекстРасчетаПринадлежности = Неопределено Тогда
					block_context._КонтекстРасчетаПринадлежности = Новый Соответствие();
					block_context._КонтекстРасчетаПринадлежности.Вставить("СторонаПроводки",  block_context.accounting_entry_side);
					Попытка
						Для счПарам = 1 По ИдентифПарам.Значение.Количество()-1 Цикл
							block_context._КонтекстРасчетаПринадлежности.Вставить(args_values.args[счПарам], ИдентифПарам.Значение[счПарам]);
						КонецЦикла;
					Исключение
						ИнфОбОшибке = ИнформацияОбОшибке();
						ВызватьИсключение(NewExtExceptionСтрока(ИнфОбОшибке, "Ошибка при расчете идентифицирующего параметра", "Код счета: " + block_context.accounting_entry_side.КодСчета+", параметр "+ИдентифПарам.Ключ));						
					КонецПопытки;
					context_set_next_step();
				КонецЕсли;
				
				Если get_prop(block_context, "_child") = Неопределено Тогда
				    block_context.Вставить("_child", Новый Структура("variable_scopes", Новый Массив));
					block_context["_child"]["variable_scopes"].Добавить(block_context._КонтекстРасчетаПринадлежности);
				КонецЕсли;
				save_last_context();
				context = context_init_nested(block_context, BlocklyExecutor.workspace.name);
				block_context["_child"] = context.data; 
				Результат = block_execute(handler.type,handler.node, path, context, context.block_context);
				delete_last_context();

				Если Результат = Истина Тогда
					Стр["Рейтинг"] = Стр["Рейтинг"]+1;
				ИначеЕсли Результат = Ложь Тогда
					СтрНеПодходит = Истина;
					Прервать;
				КонецЕсли;
				block_context._КонтекстРасчетаПринадлежности = Неопределено;
				block_context._child = Неопределено;
			КонецЕсли;
			сч = сч + 1;
			block_context.ИндексПараметраПодходящегоПоказателя = сч;
		КонецЦикла;
		Если СтрНеПодходит Тогда
			Продолжить;
		КонецЕсли;
		block_context.ТаблицаПодходящихИсточник.Добавить(Стр);
		block_context.ИндексПодходящегоПоказателя = block_context.ИндексПодходящегоПоказателя+1;
		block_context.ИндексПараметраПодходящегоПоказателя = 0;
	КонецЦикла;
	Если block_context.ТаблицаПодходящихИсточник.Количество() = 0 Тогда
		add_indicator_error(block_context.accounting_entry_side.КодСчета);
		Возврат accounting_entry_side_result;		
	КонецЕсли;
	
	// Сортируем подходящие показатели источника и выбираем первый
	УпорядоченнаяТаблица = ИнициализироватьТаблицупоказателей();
	Для Каждого ЭлементМассива Из block_context.ТаблицаПодходящихИсточник Цикл
		НоваяСтрока = УпорядоченнаяТаблица.Добавить();
        Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
            НоваяСтрока[ЗначениеСтруктуры.Ключ] = ЗначениеСтруктуры.Значение;
		КонецЦикла;
	КонецЦикла;
	УпорядоченнаяТаблица.Сортировать("Рейтинг Убыв, Приоритет Возр");
	ПодходящийПоказательИсточник = УпорядоченнаяТаблица[0];
	
	// Получаем соответствующий показатель в системе-приемнике
	ПодходящийПоказательПриемник = get_prop(indicator_list_dest, УпорядоченнаяТаблица[0].КодПоказателя);
	Если ПодходящийПоказательПриемник = Неопределено Тогда
		add_indicator_error(УпорядоченнаяТаблица[0].КодПоказателя);
		Возврат accounting_entry_side_result;
	КонецЕсли;
	
	accounting_entry_side_result.Вставить("СчетСБИС", ПодходящийПоказательПриемник["КодСчета"]); 
	
	// Рассчитываем детализации
	сч = 0;
	Для Каждого Детал Из ПодходящийПоказательПриемник["Детализация"] Цикл
		Если сч < block_context.ИндексДетализацииПодходящегоПоказателя Тогда
			сч = сч + 1;
			Продолжить;
		КонецЕсли;
		Если block_context.blacklist_detalization["Список"].Найти(Детал.Ключ) = Неопределено Тогда
			Если ЗначениеЗаполнено(Детал.Значение) и ЗначениеЗаполнено(Детал.Значение["СпособПолучения"]) Тогда
				РезультатРасчета = Неопределено;
				СпособПолученияЭкспорт = ?(ЗначениеЗаполнено(ПодходящийПоказательИсточник.Детализация[Детал.Ключ]), ПодходящийПоказательИсточник.Детализация[Детал.Ключ]["СпособПолучения"], ""); 
				ФункцияЭкспорт = ?(ЗначениеЗаполнено(СпособПолученияЭкспорт), СпособПолученияЭкспорт[0], "");
				Если ЗначениеЗаполнено(ФункцияЭкспорт) Тогда
					handler = workspace_init_procedure_block(ФункцияЭкспорт);
					args_values = procedures_callreturn_get_params(handler.node);
					Если block_context._КонтекстРасчетаЭкспортаДетализации = Неопределено Тогда
						block_context._КонтекстРасчетаЭкспортаДетализации = Новый Соответствие();
						block_context._КонтекстРасчетаЭкспортаДетализации.Вставить("СторонаПроводки",  block_context.accounting_entry_side);
						Попытка
							Для счПарам = 1 По СпособПолученияЭкспорт.Количество()-1 Цикл
								block_context._КонтекстРасчетаЭкспортаДетализации.Вставить(args_values.args[счПарам], СпособПолученияЭкспорт[счПарам]);
							КонецЦикла;
						Исключение
							ИнфОбОшибке = ИнформацияОбОшибке();
							ВызватьИсключение(NewExtExceptionСтрока(ИнфОбОшибке, "Ошибка при расчете детализации", "Код счета: " + block_context.accounting_entry_side.КодСчета+", функция "+ФункцияЭкспорт));						
						КонецПопытки;
						context_set_next_step();
					КонецЕсли;
					
					Если get_prop(block_context, "_child") = Неопределено Тогда
					    block_context.Вставить("_child", Новый Структура("variable_scopes", Новый Массив));
						block_context["_child"]["variable_scopes"].Добавить(block_context._КонтекстРасчетаЭкспортаДетализации);
					КонецЕсли;

					save_last_context();
					context = context_init_nested(block_context, BlocklyExecutor.workspace.name);
					block_context["_child"] = context.data; 
					РезультатРасчета = block_execute(handler.type,handler.node, path, context, context.block_context);
					delete_last_context();
					block_context._КонтекстРасчетаЭкспортаДетализации = Неопределено;
					block_context._child = Неопределено;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(РезультатРасчета) и ЗначениеЗаполнено(Детал.Значение["ЗначениеПоУмолчанию"]) Тогда
					
				КонецЕсли; 
				Если ЗначениеЗаполнено(РезультатРасчета) Тогда
					СпособПолученияИмпорт = Детал.Значение["СпособПолучения"];
					ФункцияИмпорт = СпособПолученияИмпорт[0];
					Если ЗначениеЗаполнено(ФункцияИмпорт) Тогда
						handler = workspace_init_procedure_block(ФункцияИмпорт); 
						args_values = procedures_callreturn_get_params(handler.node);
						Если block_context._КонтекстРасчетаИмпортаДетализации = Неопределено Тогда
							block_context._КонтекстРасчетаИмпортаДетализации = Новый Соответствие();
							block_context._КонтекстРасчетаИмпортаДетализации.Вставить("СторонаПроводки", accounting_entry_side_result);
							block_context._КонтекстРасчетаИмпортаДетализации.Вставить("Аналитика", РезультатРасчета);
							Попытка
								Для счПарам = 1 По СпособПолученияИмпорт.Количество()-1 Цикл
									block_context._КонтекстРасчетаИмпортаДетализации.Вставить(args_values.args[счПарам+1], СпособПолученияИмпорт[счПарам]);
								КонецЦикла;
							Исключение
								ИнфОбОшибке = ИнформацияОбОшибке();
								ВызватьИсключение(NewExtExceptionСтрока(ИнфОбОшибке, "Ошибка при расчете детализации", "Код счета: " + block_context.accounting_entry_side.КодСчета+", функция "+ФункцияИмпорт));						
							КонецПопытки;
							context_set_next_step();
						КонецЕсли;
						
						Если get_prop(block_context, "_child") = Неопределено Тогда
						    block_context.Вставить("_child", Новый Структура("variable_scopes", Новый Массив));
							block_context["_child"]["variable_scopes"].Добавить(block_context._КонтекстРасчетаИмпортаДетализации);
						КонецЕсли;

						save_last_context();
						context = context_init_nested(block_context, BlocklyExecutor.workspace.name);
						block_context["_child"] = context.data; 
						accounting_entry_side_result = block_execute(handler.type,handler.node, path, context, context.block_context);
						delete_last_context();
						block_context._КонтекстРасчетаИмпортаДетализации = Неопределено;
						block_context._child = Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		сч = сч + 1;
		block_context.ИндексДетализацииПодходящегоПоказателя = сч;
	КонецЦикла;
	Возврат accounting_entry_side_result;
КонецФункции

Процедура add_indicator_error(indicator_code)
	НетПоказателя = get_prop(context.variables, "НетПоказателя", "");
	НетПоказателя = НетПоказателя + ?(НетПоказателя = "", "", ", ") + indicator_code;
	context.variables["НетПоказателя"] = НетПоказателя;	
Конецпроцедуры
 
Функция ИнициализироватьТаблицупоказателей()
	indicator_list = Новый ТаблицаЗначений();
	indicator_list.Колонки.Добавить("КодПоказателя", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(1000)));
	indicator_list.Колонки.Добавить("КодСчета", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(1000))); 
	indicator_list.Колонки.Добавить("Счет", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(1000)));
	indicator_list.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	indicator_list.Колонки.Добавить("Рейтинг", Новый ОписаниеТипов("Число"));
	indicator_list.Колонки.Добавить("Параметры", Новый ОписаниеТипов("Структура"));
	indicator_list.Колонки.Добавить("Детализация", Новый ОписаниеТипов("Соответствие"));
	indicator_list.Индексы.Добавить("КодПоказателя,КодСчета");
	
	Возврат indicator_list;
КонецФункции 
