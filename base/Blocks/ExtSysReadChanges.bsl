
Функция ТаблицаФильтровПодключения(DataFilter) Экспорт
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("Название");
	ТаблицаФильтров.Колонки.Добавить("ТипИС");
	ТаблицаФильтров.Колонки.Добавить("ИмяИС");
	ТаблицаФильтров.Колонки.Добавить("ТипЗначения");
	ТаблицаФильтров.Колонки.Добавить("Значение");
	Если ТипЗнч(DataFilter) = Тип("Соответствие") Тогда 
		Для Каждого ЗаписьFilter ИЗ DataFilter Цикл  
			Если ТипЗнч(ЗаписьFilter.Значение) <> Тип("Соответствие") Тогда
				Продолжить;
			КонецЕсли;
			Api3Link = get_prop(ЗаписьFilter.Значение,"Api3Link", Неопределено); 
			Если Api3Link = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ТипИС = get_prop(Api3Link,"ТипИС", Неопределено);
			ИмяИС = get_prop(Api3Link,"ИмяИС", Неопределено);
			ЗначениеИдентификатор = get_prop(Api3Link,"ИдИС", Неопределено);
			ЗначениеИС = Неопределено;
			Если ТипИС = "Справочники" Тогда
				ТипЗначенияФильтра = "СправочникСсылка."+ИмяИС;
				Попытка
					ЗначениеИС = Справочники[ИмяИС].ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначениеИдентификатор));
				Исключение
				КонецПопытки;	
			Иначе
				Продолжить;
			КонецЕсли;
			НовоеЗначениеФильтра = ТаблицаФильтров.Добавить();
			НовоеЗначениеФильтра.Название = ЗаписьFilter.Ключ;	
			НовоеЗначениеФильтра.ТипИС = ТипИС;	
			НовоеЗначениеФильтра.ИмяИС = ИмяИС;	
			НовоеЗначениеФильтра.ТипЗначения = ТипЗначенияФильтра;	
			НовоеЗначениеФильтра.Значение = ЗначениеИС;	
	 	КонецЦикла;	
	КонецЕсли;
	Возврат ТаблицаФильтров;
КонецФункции

Процедура ДополнитьОбъектамиИС(ТаблицаОбъектовВыгрузки, Inis) 
	ТаблицаОбъектовВыгрузки.Колонки.Добавить("ОбъектИС");
	Для Каждого Запись ИЗ Inis Цикл 
		Попытка 
			ЗаписьData = Запись.Значение["data"];
			ТипСБИС = СтрЗаменить(ЗаписьData["ТипСБИС"]["Значение"],"'",""); 
		    ИмяСБИС = СтрЗаменить(ЗаписьData["ИмяСБИС"]["Значение"],"'",""); 
			ТипИС	= СтрЗаменить(ЗаписьData["ТипИС"]["Значение"],"'",""); 
			ТипИС 	= СтрЗаменить(ТипИС, "Справочники","Справочник");
		   	ТипИС 	= СтрЗаменить(ТипИС, "Документы","Документ");
		    ТипИС 	= СтрЗаменить(ТипИС, "ПланыВидовРасчета","ПланВидовРасчета");
		    ТипИС 	= СтрЗаменить(ТипИС, "Перечисления","Перечисление");
		    ИмяИС 	= СтрЗаменить(ЗаписьData["ИмяИС"]["Значение"],"'","");
			ТипИСИмяИС = ТипИС+ "." + ИмяИС; 
			
			Если ТаблицаОбъектовВыгрузки.Найти(ТипИСИмяИС) <> Неопределено Тогда 
				Продолжить;
			КонецЕсли;	
				
			Отбор = Новый Структура("Parent,ObjId", ТипСБИС, ИмяСБИС); 
			СтрокиТаблицы = ТаблицаОбъектовВыгрузки.НайтиСтроки(Отбор);
			//Сообщить(ТипИС+ "." + ИмяИС);
			Если СтрокиТаблицы.Количество() > 0 Тогда
				СоздаватьНовуюЗапись = ИСТИНА;
				Для Каждого ЗаписьОбъектВыгрузки ИЗ СтрокиТаблицы Цикл 
					Если НЕ ЗначениеЗаполнено(ЗаписьОбъектВыгрузки.ОбъектИС) Тогда 
						ЗаписьОбъектВыгрузки.ОбъектИС = ТипИСИмяИС; 
						СоздаватьНовуюЗапись = ЛОЖЬ; 
					КонецЕсли;	
				КонецЦикла;	
				
				Если СоздаватьНовуюЗапись Тогда   
					ПерваяЗаписьТаблицы = СтрокиТаблицы.Получить(0);
					НоваяЗаписьОбъектВыгрузки = ТаблицаОбъектовВыгрузки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗаписьОбъектВыгрузки, ПерваяЗаписьТаблицы);
					НоваяЗаписьОбъектВыгрузки.ОбъектИС = ТипИСИмяИС; 		
				КонецЕсли;
			КонецЕсли;	
		Исключение
		КонецПопытки;	
	КонецЦикла;	
КонецПроцедуры

Функция ОтборПоНаправлению(ТаблицаНастроек, НаправленияОтбора)  
	ТабРезультат = ТаблицаНастроек.СкопироватьКолонки();
	Для Каждого ЗаписьНаправленияОтбора ИЗ НаправленияОтбора Цикл 
		Отбор = Новый Структура("SyncStatus", ЗаписьНаправленияОтбора);
		СтрокиОтбора = ТаблицаНастроек.НайтиСтроки(Отбор);
		Для Каждого ЗаписьОтбора ИЗ СтрокиОтбора Цикл 
			НоваяСтрока = ТабРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ЗаписьОтбора); 
		КонецЦикла;		
	КонецЦикла;	
	Возврат ТабРезультат; 
КонецФункции

Функция НаправленияСинхронизации(context_param, ConnectionId) Экспорт
	Фильтр = Новый Структура("ConnectionId", ConnectionId);
	СчетчикСтраниц = 0;
	МассивНаправлений = Новый Массив;
	Пока ИСТИНА Цикл
		res = local_helper_api3_typesyncobject_list(context_param, Фильтр, Неопределено, Неопределено, СчетчикСтраниц);
		Result = res.Получить("Result");
		Если ТипЗнч(Result) = Тип("Массив") Тогда
			Для Каждого Запись ИЗ Result Цикл   
				МассивНаправлений.Добавить(Запись);
			КонецЦикла;	
		КонецЕсли;
		Если res.Получить("Navigation") <> Неопределено
			И res["Navigation"].Получить("HasMore") = ИСТИНА Тогда
			СчетчикСтраниц = СчетчикСтраниц + 1;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	ТаблицаНастроек = Новый ТаблицаЗначений;
	ТаблицаНастроек = МассивВТаблицуЗначений(МассивНаправлений);	
	Возврат ТаблицаНастроек; 
КонецФункции

Функция ОбъектыВыгрузки(context_param, connection_uuid)
	МассивИНИ = Новый Массив;
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("id", 	connection_uuid);
	ПараметрыОперации.Вставить("Версия",ПреобразоватьВерсию(Метаданные.Версия));
	ПараметрыОперации.Вставить("INI",	МассивИНИ);
	
	АвтоматическаяОперация = local_helper_read_connection(context_param, ПараметрыОперации); 
	Inis = АвтоматическаяОперация["Inis"];
 	InisСоотв = local_helper_json_loads(Inis);
	
	ТаблицаНаправлений = НаправленияСинхронизации(context_param, connection_uuid);
	НаправленияОтбора = Новый Массив;
	НаправленияОтбора.Добавить(2);
	НаправленияОтбора.Добавить(3);
	
	ТаблицаОбъектовВыгрузки = ОтборПоНаправлению(ТаблицаНаправлений, НаправленияОтбора);
	ДополнитьОбъектамиИС(ТаблицаОбъектовВыгрузки, InisСоотв);
	Возврат ТаблицаОбъектовВыгрузки; 
КонецФункции

Функция ЭтоСсылкаДляВыгрузки(СсылкаНаОбъект, ТаблицаОбъектовВыгрузки, Фильтры)
	МетаданныеСсылки = Метаданные.НайтиПоТипу(ТипЗнч(СсылкаНаОбъект));
	ПолноеИмя = МетаданныеСсылки.ПолноеИмя(); 
	Если ТаблицаОбъектовВыгрузки.Найти(ПолноеИмя) = Неопределено Тогда
		Возврат ЛОЖЬ;
	КонецЕсли; 
	
	Для Каждого Фильтр ИЗ Фильтры Цикл 
		Если НЕ ЗначениеЗаполнено(Фильтр.Название) Тогда
			Продолжить;
		КонецЕсли;
		Если МетаданныеСсылки.Реквизиты.Найти(Фильтр.Название) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если СсылкаНаОбъект[Фильтр.Название] <> Фильтр.Значение Тогда
			Возврат ЛОЖЬ;
		КонецЕсли;		
	КонецЦикла;
	
	Возврат ИСТИНА;
КонецФункции

Функция BlocklyGetInfoParams(info, НазваниеРеквизита, ЗначениеРеквизита) Экспорт 
	Если ТипЗнч(info) = Тип("Соответствие") Тогда
		info_params = info.Получить("Params");
		Если ТипЗнч(info_params) = Тип("Массив") Тогда 
			Для Каждого Запись ИЗ info_params Цикл
				Если Запись.Получить(НазваниеРеквизита) = ЗначениеРеквизита Тогда
					Возврат Запись;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;
	Возврат Неопределено;	
КонецФункции

Процедура ЗаписатьИзмененияУзлаВExtsyncdoc(context, connection_uuid, УзелПланаОбмена, Data)
	Фильтры = Data.Получить("Filter"); 
	ТаблицаФильтров = ТаблицаФильтровПодключения(Фильтры);
	ОбъектыВыгрузки = ОбъектыВыгрузки(context.params, connection_uuid);	
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелПланаОбмена,УзелПланаОбмена.НомерОтправленного);
	direction = 1;
	ПараметрыВызова = Новый Структура("Direction", direction);
			
	objects = Новый Массив;
	ПрочиталиОбъект = Ложь;
	РазмерСтраницы = 20;
	Пока Истина Цикл
		Если ВыборкаИзменений.Следующий() Тогда 
			Попытка 
				СсылкаНаОбъект = ВыборкаИзменений.Получить().Ссылка;
				Если ЭтоСсылкаДляВыгрузки(СсылкаНаОбъект, ОбъектыВыгрузки, ТаблицаФильтров) Тогда
					Api3Object = Api3Object(СсылкаНаОбъект, Неопределено, ИСТИНА, ""); 
					objects.Добавить(Api3Object);
				КонецЕсли;	
			Исключение
			КонецПопытки;
			ПрочиталиОбъект = Истина;
		КонецЕсли;
    	Если Не ПрочиталиОбъект ИЛИ objects.Количество() = РазмерСтраницы Тогда 
			objects = block_extsyncdoc_write_api3_link(context, direction, objects, Истина);
			ПолученныйUuid = local_helper_extsyncdoc_write(context.params, connection_uuid, ПараметрыВызова, objects);
			context.operation.Вставить("operation_uuid", 	ПолученныйUuid);
			context.operation.Вставить("connection_uuid", 	connection_uuid); 
			ПараметрыВызова.Вставить("Uuid", ПолученныйUuid);
			objects = Новый Массив;
		КонецЕсли;
		Если Не ПрочиталиОбъект Тогда 
			Прервать; // ВЫХОД ИЗ Цикла
		КонецЕсли; 
	    ПрочиталиОбъект = Ложь;
	КонецЦикла;
КонецПроцедуры

Функция block_extsys_read_changes_calc_value(block_type, node, path, context, block_context) Экспорт
	Попытка
		connection_uuid = get_prop(context.params.operation,"connection_uuid","");
		info = get_prop(context.variables,"info",Неопределено);
		info_params = get_prop(info,"Params", Неопределено);
		СоответствиеПланОбмена = BlocklyGetInfoParams(info, "name", "ПланОбмена"); 
		Если СоответствиеПланОбмена <> Неопределено Тогда
			НазваниеПланаОбмена = СоответствиеПланОбмена.Получить("default");
		Иначе 
			block_set_variable(context, "_last_error", "Не удалось определить план обмена для блока extsys_read_changes");
			ВызватьИсключение NewExtExceptionСтрока("Не удалось определить план обмена для блока extsys_read_changes");
			Возврат Ложь;
		КонецЕсли;	
		
		Data = get_prop(context.variables,"Data",Неопределено); 
		Если ТипЗнч(Data) <> Тип("Соответствие") Тогда
			block_set_variable(context, "_last_error", "Не удалось получить параметры подключения для блока extsys_read_changes");
			ВызватьИсключение NewExtExceptionСтрока("Не удалось получить параметры подключения для блока extsys_read_changes");
			Возврат Ложь;	
		КонецЕсли;	
		УзелПланаОбмена = ПланыОбмена[НазваниеПланаОбмена].ПолучитьСсылку(Новый УникальныйИдентификатор(connection_uuid));	
		ЗаписатьИзмененияУзлаВExtsyncdoc(context, connection_uuid, УзелПланаОбмена, Data); 	
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		block_set_variable(context, "_last_error", NewExtExceptionСтрока(ИнфОбОшибке));
		ВызватьИсключение NewExtExceptionСтрока(ИнфОбОшибке);
		Возврат Ложь;
	КонецПопытки;
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелПланаОбмена,УзелПланаОбмена.НомерОтправленного);
	УзелПланаОбменаОбъект = УзелПланаОбмена.ПолучитьОбъект();
	УзелПланаОбменаОбъект.НомерОтправленного = УзелПланаОбменаОбъект.НомерОтправленного + 1; 
	УзелПланаОбменаОбъект.Записать();
	Возврат ИСТИНА;
КонецФункции 

