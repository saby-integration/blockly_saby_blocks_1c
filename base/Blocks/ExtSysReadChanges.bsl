Функция СсылкаСправочникаПоИдентификатору(ИмяИС, ЗначениеИдентификатор) 
	Возврат Справочники[ИмяИС].ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначениеИдентификатор))	
КонецФункции	

//DynamicDirective
Функция МассивФильтровПодключения(DataFilter) Экспорт
	МассивФильтров = Новый Массив;
	Если ТипЗнч(DataFilter) = Тип("Соответствие") Тогда 
		Для Каждого ЗаписьFilter ИЗ DataFilter Цикл  
			Если ТипЗнч(ЗаписьFilter.Значение) <> Тип("Соответствие") Тогда
				Продолжить;
			КонецЕсли;
			Api3Link = get_prop(ЗаписьFilter.Значение,"Api3Link", Неопределено); 
			Если Api3Link = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ТипИС = get_prop(Api3Link,"ТипИС", Неопределено);
			ИмяИС = get_prop(Api3Link,"ИмяИС", Неопределено);
			ЗначениеИдентификатор = get_prop(Api3Link,"ИдИС", Неопределено);
			ЗначениеИС = Неопределено;
			Если ТипИС = "Справочники" Тогда
				ТипЗначенияФильтра = "СправочникСсылка."+ИмяИС;
				Попытка
					ЗначениеИС = СсылкаСправочникаПоИдентификатору(ИмяИС, ЗначениеИдентификатор);
				Исключение
				КонецПопытки;	
			Иначе
				Продолжить;
			КонецЕсли;
			НовоеЗначениеФильтра = Новый Структура;
			НовоеЗначениеФильтра.Вставить("Название",ЗаписьFilter.Ключ);	
			НовоеЗначениеФильтра.Вставить("ТипИС", ТипИС);	
			НовоеЗначениеФильтра.Вставить("ИмяИС", ИмяИС);	
			НовоеЗначениеФильтра.Вставить("ТипЗначения", ТипЗначенияФильтра);	
			НовоеЗначениеФильтра.Вставить("Значение", ЗначениеИС);
			МассивФильтров.Добавить(НовоеЗначениеФильтра);
	 	КонецЦикла;	
	КонецЕсли;
	Возврат МассивФильтров;
КонецФункции

//DynamicDirective
Процедура ДополнитьОбъектамиИС(МассивОбъектовВыгрузки, Inis) 
	Для Каждого Запись ИЗ Inis Цикл 
		Попытка 
			ЗаписьData = Запись.Значение["data"];
			ТипСБИС = СтрЗаменить(ЗаписьData["ТипСБИС"]["Значение"],"'",""); 
		    ИмяСБИС = СтрЗаменить(ЗаписьData["ИмяСБИС"]["Значение"],"'",""); 
			ТипИС	= СтрЗаменить(ЗаписьData["ТипИС"]["Значение"],"'",""); 
			ТипИС 	= СтрЗаменить(ТипИС, "Справочники","Справочник");
		   	ТипИС 	= СтрЗаменить(ТипИС, "Документы","Документ");
		    ТипИС 	= СтрЗаменить(ТипИС, "ПланыВидовРасчета","ПланВидовРасчета");
		    ТипИС 	= СтрЗаменить(ТипИС, "Перечисления","Перечисление");
		    ИмяИС 	= СтрЗаменить(ЗаписьData["ИмяИС"]["Значение"],"'","");
			ТипИСИмяИС = ТипИС+ "." + ИмяИС; 
			
			Если НайтиВМассивеСтруктур(МассивОбъектовВыгрузки, ТипИСИмяИС, "ОбъектИС") <> Неопределено Тогда 
				Продолжить;
			КонецЕсли;	
			
			СоздаватьНовуюЗапись = Истина;
			Для Каждого ЗаписьОбъектВыгрузки ИЗ МассивОбъектовВыгрузки Цикл
				Если ЗаписьОбъектВыгрузки["Parent"] = ТипСБИС 
					И ЗаписьОбъектВыгрузки["ObjId"] = ИмяСБИС
					И НЕ ЗначениеЗаполнено(ЗаписьОбъектВыгрузки["ОбъектИС"]) Тогда
					СоздаватьНовуюЗапись = ЛОЖЬ;
					ЗаписьОбъектВыгрузки["ОбъектИС"] = ТипИСИмяИС;
					Прервать
				КонецЕсли;
			КонецЦикла;
			Если СоздаватьНовуюЗапись Тогда   
				НоваяЗаписьОбъектВыгрузки = Новый Структура;
				НоваяЗаписьОбъектВыгрузки.Вставить("Parent", ТипСБИС);
				НоваяЗаписьОбъектВыгрузки.Вставить("ObjId", ИмяСБИС);
				НоваяЗаписьОбъектВыгрузки.Вставить("ОбъектИС", ТипИСИмяИС); 
				МассивОбъектовВыгрузки.Добавить(НоваяЗаписьОбъектВыгрузки);
			КонецЕсли;		
			Исключение
		КонецПопытки;	
	КонецЦикла;	
КонецПроцедуры

//DynamicDirective
Функция ОтборПоНаправлению(МассивНаправлений, НаправленияОтбора) 
	МассивОтборПоНаправлению = Новый Массив;

	Для Каждого Запись Из МассивНаправлений Цикл
		Если НаправленияОтбора.Найти(get_prop(Запись,"SyncStatus", Ложь)) <> Неопределено Тогда
			МассивОтборПоНаправлению.Добавить(Запись);	
		КонецЕсли;	
	КонецЦикла;
 
	Возврат МассивОтборПоНаправлению; 
КонецФункции

//DynamicDirective
Функция НаправленияСинхронизации(context_param, ConnectionId) Экспорт
	Фильтр = Новый Структура("ConnectionId", ConnectionId);
	СчетчикСтраниц = 0;
	МассивНаправлений = Новый Массив;
	Пока ИСТИНА Цикл
		res = Транспорт.local_helper_api3_typesyncobject_list(context_param, Фильтр, Неопределено, Неопределено, СчетчикСтраниц);
		Result = res.Получить("Result");
		Если ТипЗнч(Result) = Тип("Массив") Тогда
			Для Каждого Запись ИЗ Result Цикл   
				МассивНаправлений.Добавить(Запись);
			КонецЦикла;	
		КонецЕсли;
		Если res.Получить("Navigation") <> Неопределено
			И res["Navigation"].Получить("HasMore") = ИСТИНА Тогда
			СчетчикСтраниц = СчетчикСтраниц + 1;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	Возврат МассивНаправлений; 
КонецФункции

//DynamicDirective
Функция ОбъектыВыгрузки(context_param, connection_uuid)
	МассивИНИ = Новый Массив;
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("id", 	connection_uuid);
	ПараметрыОперации.Вставить("Версия",ПреобразоватьВерсию(ВерсияМетаданных()));
	ПараметрыОперации.Вставить("INI",	МассивИНИ);
	
	АвтоматическаяОперация = Транспорт.local_helper_read_connection(context_param, ПараметрыОперации); 
	Inis = АвтоматическаяОперация["Inis"];
 	InisСоотв = Транспорт.local_helper_json_loads(Inis);
	
	МассивНаправлений = НаправленияСинхронизации(context_param, connection_uuid);
	НаправленияОтбора = Новый Массив;
	НаправленияОтбора.Добавить(2);
	НаправленияОтбора.Добавить(3);
	
	МассивОбъектовВыгрузки = ОтборПоНаправлению(МассивНаправлений, НаправленияОтбора);
	ДополнитьОбъектамиИС(МассивОбъектовВыгрузки, InisСоотв);
	Возврат МассивОбъектовВыгрузки; 
КонецФункции

Функция ЭтоСсылкаДляВыгрузки(СсылкаНаОбъект, ТаблицаОбъектовВыгрузки, Фильтры)
	МетаданныеСсылки = Метаданные.НайтиПоТипу(ТипЗнч(СсылкаНаОбъект));
	ПолноеИмя = МетаданныеСсылки.ПолноеИмя(); 
	Если НайтиВМассивеСтруктур(ТаблицаОбъектовВыгрузки,ПолноеИмя,"ОбъектИС") = Неопределено Тогда
		Возврат ЛОЖЬ;
	КонецЕсли; 
	
	Для Каждого Фильтр ИЗ Фильтры Цикл 
		Если НЕ ЗначениеЗаполнено(Фильтр.Название) Тогда
			Продолжить;
		КонецЕсли;
		Если МетаданныеСсылки.Реквизиты.Найти(Фильтр.Название) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если СсылкаНаОбъект[Фильтр.Название] <> Фильтр.Значение Тогда
			Возврат Ложь;
		КонецЕсли;		
	КонецЦикла;
	
	Возврат ИСТИНА;
КонецФункции

Функция BlocklyGetInfoParams(info, НазваниеРеквизита, ЗначениеРеквизита) Экспорт 
	Если ТипЗнч(info) = Тип("Соответствие") Тогда
		info_params = info.Получить("Params");
		Если ТипЗнч(info_params) = Тип("Массив") Тогда 
			Для Каждого Запись ИЗ info_params Цикл
				Если Запись.Получить(НазваниеРеквизита) = ЗначениеРеквизита Тогда
					Возврат Запись;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;
	Возврат Неопределено;	
КонецФункции

Функция УдаляемОбъектыИзПланаОбмена(УзелПланаОбмена, Условие)
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелПланаОбмена, Условие);
КонецФункции	

Функция ПолучитьИзменения(ИмяПланаОбмена, ИдентификаторУзлаОбмена, МассивОбъектовДляУдаления , ТаблицаФильтров, ОбъектыВыгрузки)
	УзелПланаОбмена = ПланыОбмена[ИмяПланаОбмена].ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторУзлаОбмена));	
	Если НЕ ЗначениеЗаполнено(УзелПланаОбмена) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	Если МассивОбъектовДляУдаления <> Неопределено Тогда
		УдаляемОбъектыИзПланаОбмена(УзелПланаОбмена, МассивОбъектовДляУдаления);		
	КонецЕсли;  
	МассивОбъектовДляУдаления = Новый Массив;
	objects = Новый Массив;
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелПланаОбмена,УзелПланаОбмена.НомерОтправленного);
	РазмерСтраницы = 20;
	Пока ВыборкаИзменений.Следующий() Цикл
		ОбъектВыгрузки = ВыборкаИзменений.Получить();
		Попытка 
			СсылкаНаОбъект = ОбъектВыгрузки.Ссылка;
			Если ЭтоСсылкаДляВыгрузки(СсылкаНаОбъект, ОбъектыВыгрузки, ТаблицаФильтров) Тогда
				Api3Object = Api3Object(СсылкаНаОбъект, Неопределено, Истина, "", Истина); 
				objects.Добавить(Api3Object);
				МассивОбъектовДляУдаления.Добавить(СсылкаНаОбъект);
			Иначе
				УдаляемОбъектыИзПланаОбмена(УзелПланаОбмена, ОбъектВыгрузки);		
			КонецЕсли;	
		Исключение
			УдаляемОбъектыИзПланаОбмена(УзелПланаОбмена, ОбъектВыгрузки);	
		КонецПопытки;
		Если objects.Количество() = РазмерСтраницы Тогда
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	Если objects.Количество() = 0 Тогда //Закончили считывание изменений 
		УдаляемОбъектыИзПланаОбмена(УзелПланаОбмена, УзелПланаОбмена.НомерОтправленного); 
		УзелПланаОбменаОбъект = УзелПланаОбмена.ПолучитьОбъект();
		УзелПланаОбменаОбъект.НомерОтправленного = УзелПланаОбменаОбъект.НомерОтправленного + 1; 
		УзелПланаОбменаОбъект.Записать();
	КонецЕсли;
	Возврат objects;	
КонецФункции	

//DynamicDirective
Процедура ЗаписатьИзмененияУзлаВExtsyncdoc(context, ИмяПланаОбмена, connection_uuid, Data)
	Фильтры = Data.Получить("Filter"); 
	ТаблицаФильтров = МассивФильтровПодключения(Фильтры);
	ОбъектыВыгрузки = ОбъектыВыгрузки(context.params, connection_uuid);	
	direction = 1;
	ПараметрыВызова = Новый Структура("Direction", direction);
			
	objects = Новый Массив;
	ВыполнилиПервыйЦиклОбмена = Ложь;
	МассивОбъектовДляУдаления = Неопределено;
	Пока Истина Цикл
		objects = ПолучитьИзменения(ИмяПланаОбмена, connection_uuid, МассивОбъектовДляУдаления, ТаблицаФильтров, ОбъектыВыгрузки);	
		Если Не ВыполнилиПервыйЦиклОбмена Или objects.Количество() > 0 Тогда 
			objects = block_extsyncdoc_write_api3_link(context, direction, objects, Истина);
			ПолученныйUuid = Транспорт.local_helper_extsyncdoc_write(context.params, connection_uuid, ПараметрыВызова, objects);
			context.operation.Вставить("operation_uuid", 	ПолученныйUuid);
			context.operation.Вставить("connection_uuid", 	connection_uuid); 
			ПараметрыВызова.Вставить("Uuid", ПолученныйUuid);
		КонецЕсли;  
		Если objects.Количество() = 0 Тогда 
			Прервать;
		КонецЕсли;	
	    ВыполнилиПервыйЦиклОбмена = Истина;
	КонецЦикла;
КонецПроцедуры

//DynamicDirective
Функция block_extsys_read_changes_calc_value(block_type, node, path, context, block_context) Экспорт
	Попытка
		connection_uuid = get_prop(context.params.operation,"connection_uuid","");
		info = block_get_variable(context, "parameters");
		info_params = get_prop(info,"Params", Неопределено);
		СоответствиеПланОбмена = BlocklyGetInfoParams(info, "name", "ПланОбмена"); 
		Если СоответствиеПланОбмена <> Неопределено Тогда
			ИмяПланаОбмена = СоответствиеПланОбмена.Получить("default");
		Иначе 
			block_set_variable(context, "_last_error", "Не удалось определить план обмена для блока extsys_read_changes");
			ВызватьИсключение NewExtExceptionСтрока("Не удалось определить план обмена для блока extsys_read_changes");
			Возврат Ложь;
		КонецЕсли;	
		
		Data = block_get_variable(context,"Data"); 
		Если ТипЗнч(Data) <> Тип("Соответствие") Тогда
			block_set_variable(context, "_last_error", "Не удалось получить параметры подключения для блока extsys_read_changes");
			ВызватьИсключение NewExtExceptionСтрока("Не удалось получить параметры подключения для блока extsys_read_changes");
			Возврат Ложь;	
		КонецЕсли;	
		ЗаписатьИзмененияУзлаВExtsyncdoc(context, ИмяПланаОбмена, connection_uuid, Data); 	
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		block_set_variable(context, "_last_error", NewExtExceptionСтрока(ИнфОбОшибке));
		ВызватьИсключение NewExtExceptionСтрока(ИнфОбОшибке);
		Возврат Ложь;
	КонецПопытки;
	Возврат ИСТИНА;
КонецФункции 
