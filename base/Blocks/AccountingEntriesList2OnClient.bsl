
Функция accounting_entries_list2_query_builder(context, block_context)  
	local_context = Новый Структура;
	Результат = Новый Массив;
	УжеОбработаны = 0;
	// признак отладки
	Если block_context.Свойство("selection_index") Тогда
		УжеОбработаны = block_context["selection_index"];	
	КонецЕсли;
	
	сч = 0;
	счНаСтранице = 0;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|   ХозрасчетныйДвиженияССубконто.Период КАК Период,
	|   ХозрасчетныйДвиженияССубконто.Организация,
	|   ХозрасчетныйДвиженияССубконто.Регистратор,
	|   ХозрасчетныйДвиженияССубконто.СчетДт.КодБыстрогоВыбора КАК СчетДт,
	|   ХозрасчетныйДвиженияССубконто.СубконтоДт1,
	|   ХозрасчетныйДвиженияССубконто.СубконтоДт2,
	|   ХозрасчетныйДвиженияССубконто.СубконтоДт3,
	|   ХозрасчетныйДвиженияССубконто.СчетКт.КодБыстрогоВыбора КАК СчетКт,
	|   ХозрасчетныйДвиженияССубконто.СубконтоКт1,
	|   ХозрасчетныйДвиженияССубконто.СубконтоКт2,
	|   ХозрасчетныйДвиженияССубконто.СубконтоКт3,
	|   ХозрасчетныйДвиженияССубконто.Сумма
	|ИЗ
	|   РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|       &ДатаНач,
	|       &ДатаКнц,
	|       Активность = Истина И Организация = &Организация
	|   ) КАК ХозрасчетныйДвиженияССубконто
	|ГДЕ
	|   ХозрасчетныйДвиженияССубконто.Сумма <> 0
	|УПОРЯДОЧИТЬ ПО
	|   Период Возр,
	|   Регистратор
	|";
	
	Запрос.УстановитьПараметр("ДатаНач", block_context.filter["dateStart"]);
	Запрос.УстановитьПараметр("ДатаКнц", КонецДня(block_context.filter["dateEnd"]));
	ИмяСправочникаОрганизаций = Сред(block_context.filter["organization"]["ИмяИС"], Найти(block_context.filter["organization"]["ИмяИС"], ".")+1);
	Организация = Справочники[ИмяСправочникаОрганизаций].ПолучитьСсылку(Новый УникальныйИдентификатор(block_context.filter["organization"]["ИдИС"]));
	block_context.Вставить("Организация", Организация);
	Запрос.УстановитьПараметр("Организация", Организация);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	local_context.Вставить("Выборка", Выборка);
	Пока local_context["Выборка"].СледующийПоЗначениюПоля("Регистратор") Цикл
		сч = сч + 1;
		Если сч <= УжеОбработаны Тогда
			Продолжить;
		КонецЕсли;
		ПроводкиСырые = Новый Массив;
		Если block_context["UNLOADING_TRANSACTIONS"] = "TRUE" Тогда
			Пока local_context["Выборка"].Следующий() Цикл
				ПроводкаСыраяДебет = Новый Структура("КодСчета,Аналитика1ИС,Аналитика2ИС,Аналитика3ИС", local_context["Выборка"].СчетДт,local_context["Выборка"].СубконтоДт1,local_context["Выборка"].СубконтоДт2,local_context["Выборка"].СубконтоДт3);
				ПроводкаСыраяКредит = Новый Структура("КодСчета,Аналитика1ИС,Аналитика2ИС,Аналитика3ИС", local_context["Выборка"].СчетКт,local_context["Выборка"].СубконтоКт1,local_context["Выборка"].СубконтоКт2,local_context["Выборка"].СубконтоКт3);
				ПроводкиСырые.Добавить(Новый Структура("Дебет,Кредит,Сумма,Дата", ПроводкаСыраяДебет, ПроводкаСыраяКредит, local_context["Выборка"].Сумма, Формат(local_context["Выборка"].Период, "ДФ=dd.MM.yyyy")));	
			КонецЦикла;
		КонецЕсли;
		ТипЗначения = ТипЗнч(local_context["Выборка"].Регистратор);
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
		ini_name = ОбъектМетаданных.Имя;
		ИмяСБИС = Неопределено;
		Результат.Добавить(Новый Структура("Название, Дата, Номер, ПроводкиСырые, ИдИС, ИмяИС, ТипИС, ИмяСБИС, НашаОрганизация, ini_name", Строка(local_context["Выборка"].Регистратор), Формат(local_context["Выборка"].Регистратор.Дата,"ДФ=dd.MM.yyyy"), local_context["Выборка"].Регистратор.Номер, ПроводкиСырые, XMLСтрока(local_context["Выборка"].Регистратор.УникальныйИдентификатор()), ОбъектМетаданных.Имя, "Документы", ИмяСБИС, Новый Структура("ИдИС, ИмяИС, ИмяСБИС", XMLСтрока(block_context.Организация.УникальныйИдентификатор()), block_context.filter["organization"]["ИмяИС"], "НашаОрганизация"), ini_name ));
		block_context["selection_index"] = block_context["selection_index"] + 1;
		счНаСтранице = счНаСтранице + 1;
		Если счНаСтранице = 20 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	block_context.Вставить("selection_max_index", block_context["selection_index"]);
	Возврат Результат;
	
КонецФункции

&НаКлиенте //DynamicDirective
Функция accounting_entries_list2_items(context, block_context, local_context)
	Результат = Новый Массив;	
	Если Не block_context.Свойство("selection_index") Тогда
		block_context.Вставить("selection_index", 0);
	КонецЕсли;
	
	Если block_context.Свойство("selection_max_index") И block_context["selection_index"] = block_context["selection_max_index"] Тогда
		Возврат Результат;	
	КонецЕсли;
	
	Результат = accounting_entries_list2_query_builder(context, block_context);

	Контекст = Новый Структура;
	Контекст.Вставить("blacklist_accounts", block_context.blacklist_accounts);
	Контекст.Вставить("blacklist_detalization", block_context.blacklist_detalization);
	Контекст.Вставить("indicator_list_dest", block_context.indicator_list_dest);
	Контекст.Вставить("indicator_list_src", block_context.indicator_list_src);
				
	КолвоЭлементов = Результат.Количество();
	Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
		ТекущийИндекс = КолвоЭлементов - ОбратныйИндекс;
		ЭлементМассива = Результат[ТекущийИндекс];
		
		Попытка
			Load_ini(ЭлементМассива.ini_name+"_read");
		Исключение
			Если block_context["UNKNOWN_AS_ACCOUNTING_CERTIFICATES"] = "TRUE" Тогда
				ЭлементМассива.ini_name = "БухгалтерскаяСправка";
				ЭлементМассива.ИмяСБИС = "БухгалтерскаяСправка";
			Иначе
				ЭлементМассива.Удалить(ТекущийИндекс);
				Продолжить;
			КонецЕсли;
		КонецПопытки;
		
		Проводки = Новый Массив;
		Для Каждого Запись ИЗ ЭлементМассива.ПроводкиСырые Цикл		
			
			// Проводка Дебет
			Контекст.Вставить("accounting_entry_side", Запись.Дебет);
			ПроводкаДебет = block_indicator_from_accounting_entry_side_calc_value("indicator_from_accounting_entry_side",
			Неопределено, "", context, Контекст);
			// Проводка Кредит
			Контекст.Вставить("accounting_entry_side", Запись.Кредит);
			ПроводкаКредит = block_indicator_from_accounting_entry_side_calc_value("indicator_from_accounting_entry_side",
			Неопределено, "", context, Контекст);
			
			Проводки.Добавить(Новый Структура("Дебет,Кредит,Сумма,Дата", ПроводкаДебет, ПроводкаКредит, Запись.Сумма, Запись.Дата));	
		КонецЦикла;
		ЭлементМассива.Вставить("Проводки",Проводки);  
		Результат.Вставить(ТекущийИндекс,ЭлементМассива);
	КонецЦикла;
	
	Если Результат.Количество() = 0 Тогда 
		accounting_entries_list2_items(context, block_context, local_context);	
	КонецЕсли;	
	Возврат Результат;
КонецФункции
